# Generated by Django 4.2.7 on 2025-10-03 18:26

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('dating', '0012_userinterest_user_communication_style_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chat_type', models.CharField(choices=[('direct', 'Direct Message'), ('matchmaker_intro', 'Matchmaker Introduction'), ('group', 'Group Chat')], default='direct', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_message_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('chat_name', models.CharField(blank=True, help_text='Custom name for group chats', max_length=100, null=True)),
                ('chat_theme', models.CharField(choices=[('default', 'Default'), ('dark', 'Dark'), ('light', 'Light'), ('colorful', 'Colorful')], default='default', max_length=20)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_chats', to=settings.AUTH_USER_MODEL)),
                ('participants', models.ManyToManyField(related_name='chats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-last_message_at'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_type', models.CharField(choices=[('text', 'Text Message'), ('voice_note', 'Voice Note'), ('image', 'Image'), ('video', 'Video'), ('document', 'Document'), ('system', 'System Message'), ('matchmaker_intro', 'Matchmaker Introduction'), ('call_start', 'Call Started'), ('call_end', 'Call Ended')], default='text', max_length=20)),
                ('content', models.TextField(blank=True, help_text='Text content of the message', null=True)),
                ('voice_note_url', models.URLField(blank=True, help_text='URL to the voice note audio file', null=True)),
                ('voice_note_duration', models.PositiveIntegerField(blank=True, help_text='Duration in seconds', null=True)),
                ('image_url', models.URLField(blank=True, help_text='URL to image file', null=True)),
                ('video_url', models.URLField(blank=True, help_text='URL to video file', null=True)),
                ('document_url', models.URLField(blank=True, help_text='URL to document file', null=True)),
                ('document_name', models.CharField(blank=True, help_text='Original document name', max_length=255, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('is_edited', models.BooleanField(default=False)),
                ('edited_at', models.DateTimeField(blank=True, null=True)),
                ('reactions', models.JSONField(default=dict, help_text="User reactions: {'user_id': 'emoji'}")),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='dating.chat')),
                ('reply_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='dating.message')),
                ('sender', models.ForeignKey(blank=True, help_text='Null for system messages', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='VoiceNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio_url', models.URLField(help_text='URL to the audio file')),
                ('duration', models.PositiveIntegerField(help_text='Duration in seconds')),
                ('file_size', models.PositiveIntegerField(help_text='File size in bytes')),
                ('transcription', models.TextField(blank=True, help_text='Speech-to-text transcription', null=True)),
                ('transcription_confidence', models.FloatField(blank=True, help_text='Transcription confidence score', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('message', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='voice_note', to='dating.message')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('spam', 'Spam'), ('harassment', 'Harassment'), ('inappropriate_content', 'Inappropriate Content'), ('fake_profile', 'Fake Profile'), ('other', 'Other')], max_length=30)),
                ('description', models.TextField(help_text='Detailed description of the issue')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('reviewed', 'Reviewed'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed')], default='pending', max_length=20)),
                ('moderator_notes', models.TextField(blank=True, null=True)),
                ('action_taken', models.CharField(blank=True, max_length=100, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='dating.chat')),
                ('message', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reports', to='dating.message')),
                ('reported_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_reports_received', to=settings.AUTH_USER_MODEL)),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_reports_made', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChatParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('left_at', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('notifications_enabled', models.BooleanField(default=True)),
                ('mute_until', models.DateTimeField(blank=True, help_text='Mute chat until this time', null=True)),
                ('custom_nickname', models.CharField(blank=True, max_length=50, null=True)),
                ('last_seen_at', models.DateTimeField(blank=True, null=True)),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_participants', to='dating.chat')),
                ('last_read_message', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dating.message')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_participations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-joined_at'],
            },
        ),
        migrations.CreateModel(
            name='Call',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('call_type', models.CharField(choices=[('voice', 'Voice Call'), ('video', 'Video Call')], default='voice', max_length=10)),
                ('status', models.CharField(choices=[('initiated', 'Initiated'), ('ringing', 'Ringing'), ('active', 'Active'), ('ended', 'Ended'), ('missed', 'Missed'), ('declined', 'Declined'), ('busy', 'Busy')], default='initiated', max_length=20)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('answered_at', models.DateTimeField(blank=True, null=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('duration', models.PositiveIntegerField(blank=True, help_text='Call duration in seconds', null=True)),
                ('call_id', models.CharField(help_text='Unique call identifier for WebRTC', max_length=100, unique=True)),
                ('room_id', models.CharField(blank=True, help_text='WebRTC room ID', max_length=100, null=True)),
                ('quality_score', models.FloatField(blank=True, help_text='Call quality score (0-100)', null=True)),
                ('is_recorded', models.BooleanField(default=False)),
                ('recording_url', models.URLField(blank=True, help_text='URL to call recording', null=True)),
                ('callee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_calls', to=settings.AUTH_USER_MODEL)),
                ('caller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='initiated_calls', to=settings.AUTH_USER_MODEL)),
                ('chat', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='calls', to='dating.chat')),
            ],
            options={
                'ordering': ['-started_at'],
            },
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['chat', 'timestamp'], name='dating_mess_chat_id_36765d_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['sender', 'timestamp'], name='dating_mess_sender__898263_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['message_type'], name='dating_mess_message_7b619a_idx'),
        ),
        migrations.AddIndex(
            model_name='chatreport',
            index=models.Index(fields=['status', 'report_type'], name='dating_chat_status_70ceea_idx'),
        ),
        migrations.AddIndex(
            model_name='chatreport',
            index=models.Index(fields=['reported_user', 'status'], name='dating_chat_reporte_8bda5e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='chatparticipant',
            unique_together={('chat', 'user')},
        ),
        migrations.AddIndex(
            model_name='chat',
            index=models.Index(fields=['chat_type', 'is_active'], name='dating_chat_chat_ty_5f59fb_idx'),
        ),
        migrations.AddIndex(
            model_name='chat',
            index=models.Index(fields=['last_message_at'], name='dating_chat_last_me_654208_idx'),
        ),
        migrations.AddIndex(
            model_name='call',
            index=models.Index(fields=['caller', 'status'], name='dating_call_caller__27da55_idx'),
        ),
        migrations.AddIndex(
            model_name='call',
            index=models.Index(fields=['callee', 'status'], name='dating_call_callee__ef11d0_idx'),
        ),
        migrations.AddIndex(
            model_name='call',
            index=models.Index(fields=['call_id'], name='dating_call_call_id_fbf2f5_idx'),
        ),
    ]
