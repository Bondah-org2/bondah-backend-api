# Generated by Django 4.2.7 on 2025-10-03 20:37

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('dating', '0013_chat_message_voicenote_chatreport_chatparticipant_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post_type', models.CharField(choices=[('story', 'Story'), ('post', 'Regular Post'), ('announcement', 'Announcement')], default='post', max_length=20)),
                ('content', models.TextField(help_text='Post content/text')),
                ('image_urls', models.JSONField(default=list, help_text='List of image URLs')),
                ('video_url', models.URLField(blank=True, help_text='URL to video file', null=True)),
                ('video_thumbnail', models.URLField(blank=True, help_text='Video thumbnail URL', null=True)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('friends', 'Friends Only'), ('private', 'Private')], default='public', max_length=20)),
                ('location', models.CharField(blank=True, help_text='Post location', max_length=255, null=True)),
                ('hashtags', models.JSONField(default=list, help_text='List of hashtags in the post')),
                ('mentions', models.JSONField(default=list, help_text='List of mentioned user IDs')),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('comments_count', models.PositiveIntegerField(default=0)),
                ('shares_count', models.PositiveIntegerField(default=0)),
                ('bonds_count', models.PositiveIntegerField(default=0, help_text='Handshake/bond reactions')),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_reported', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Comment content')),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('replies_count', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_edited', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_comments', to=settings.AUTH_USER_MODEL)),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='dating.postcomment')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='dating.post')),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('story_type', models.CharField(choices=[('image', 'Image Story'), ('video', 'Video Story'), ('text', 'Text Story')], default='image', max_length=20)),
                ('content', models.TextField(blank=True, help_text='Text content for text stories', null=True)),
                ('image_url', models.URLField(blank=True, help_text='URL to image file', null=True)),
                ('video_url', models.URLField(blank=True, help_text='URL to video file', null=True)),
                ('video_duration', models.PositiveIntegerField(blank=True, help_text='Video duration in seconds', null=True)),
                ('background_color', models.CharField(blank=True, help_text='Hex color for text stories', max_length=7, null=True)),
                ('text_color', models.CharField(blank=True, help_text='Text color for text stories', max_length=7, null=True)),
                ('font_size', models.PositiveIntegerField(default=16, help_text='Font size for text stories')),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('reactions_count', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField(help_text='When the story expires (24 hours from creation)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stories', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostShare',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform', models.CharField(choices=[('whatsapp', 'WhatsApp'), ('facebook', 'Facebook'), ('twitter', 'Twitter/X'), ('instagram', 'Instagram'), ('threads', 'Threads'), ('copy_link', 'Copy Link')], max_length=20)),
                ('shared_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='dating.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_shares', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-shared_at'],
            },
        ),
        migrations.CreateModel(
            name='PostReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('spam', 'Spam or Misleading'), ('inappropriate', 'Inappropriate or Offensive'), ('harassment', 'Harassment or Bullying'), ('misinformation', 'Misinformation'), ('fake', 'Fake Profile'), ('other', 'Other')], max_length=30)),
                ('description', models.TextField(help_text='Detailed description of the issue')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('reviewed', 'Reviewed'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed')], default='pending', max_length=20)),
                ('moderator_notes', models.TextField(blank=True, null=True)),
                ('action_taken', models.CharField(blank=True, max_length=100, null=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='dating.postcomment')),
                ('post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='dating.post')),
                ('reported_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_reports_received', to=settings.AUTH_USER_MODEL)),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_reports_made', to=settings.AUTH_USER_MODEL)),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_post_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PostInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('like', 'Like'), ('share', 'Share'), ('bond', 'Bond/Handshake'), ('save', 'Save')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='dating.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_interactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FeedSearch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.CharField(help_text='Search query', max_length=255)),
                ('results_count', models.PositiveIntegerField(default=0, help_text='Number of results found')),
                ('filters_applied', models.JSONField(default=dict, help_text='Applied search filters')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='feed_searches', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommentInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('like', 'Like')], default='like', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='dating.postcomment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_interactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StoryView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('viewed_at', models.DateTimeField(auto_now_add=True)),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='views', to='dating.story')),
                ('viewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='story_views', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-viewed_at'],
                'unique_together': {('story', 'viewer')},
            },
        ),
        migrations.CreateModel(
            name='StoryReaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reaction_type', models.CharField(choices=[('like', 'Like'), ('love', 'Love'), ('laugh', 'Laugh'), ('wow', 'Wow'), ('sad', 'Sad'), ('angry', 'Angry')], default='like', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('story', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reactions', to='dating.story')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='story_reactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('story', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='story',
            index=models.Index(fields=['author', 'created_at'], name='dating_stor_author__8c4c79_idx'),
        ),
        migrations.AddIndex(
            model_name='story',
            index=models.Index(fields=['expires_at', 'is_active'], name='dating_stor_expires_8bc557_idx'),
        ),
        migrations.AddIndex(
            model_name='story',
            index=models.Index(fields=['story_type', 'is_active'], name='dating_stor_story_t_7b8d4d_idx'),
        ),
        migrations.AddIndex(
            model_name='postshare',
            index=models.Index(fields=['post', 'platform'], name='dating_post_post_id_230be9_idx'),
        ),
        migrations.AddIndex(
            model_name='postshare',
            index=models.Index(fields=['user', 'shared_at'], name='dating_post_user_id_1ae6d9_idx'),
        ),
        migrations.AddIndex(
            model_name='postreport',
            index=models.Index(fields=['status', 'report_type'], name='dating_post_status_341887_idx'),
        ),
        migrations.AddIndex(
            model_name='postreport',
            index=models.Index(fields=['reported_user', 'status'], name='dating_post_reporte_2f3f08_idx'),
        ),
        migrations.AddIndex(
            model_name='postreport',
            index=models.Index(fields=['post', 'status'], name='dating_post_post_id_56c65d_idx'),
        ),
        migrations.AddIndex(
            model_name='postreport',
            index=models.Index(fields=['comment', 'status'], name='dating_post_comment_b490f5_idx'),
        ),
        migrations.AddIndex(
            model_name='postinteraction',
            index=models.Index(fields=['post', 'interaction_type'], name='dating_post_post_id_5d8aaf_idx'),
        ),
        migrations.AddIndex(
            model_name='postinteraction',
            index=models.Index(fields=['user', 'interaction_type'], name='dating_post_user_id_6d7aa3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='postinteraction',
            unique_together={('user', 'post', 'interaction_type')},
        ),
        migrations.AddIndex(
            model_name='postcomment',
            index=models.Index(fields=['post', 'created_at'], name='dating_post_post_id_910bd1_idx'),
        ),
        migrations.AddIndex(
            model_name='postcomment',
            index=models.Index(fields=['author', 'created_at'], name='dating_post_author__26cab5_idx'),
        ),
        migrations.AddIndex(
            model_name='postcomment',
            index=models.Index(fields=['parent_comment', 'created_at'], name='dating_post_parent__1271be_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['author', 'created_at'], name='dating_post_author__5492bf_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['post_type', 'is_active'], name='dating_post_post_ty_80be04_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['visibility', 'created_at'], name='dating_post_visibil_bc8d39_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['is_featured', 'created_at'], name='dating_post_is_feat_0fce67_idx'),
        ),
        migrations.AddIndex(
            model_name='feedsearch',
            index=models.Index(fields=['query', 'created_at'], name='dating_feed_query_6a8c6f_idx'),
        ),
        migrations.AddIndex(
            model_name='feedsearch',
            index=models.Index(fields=['user', 'created_at'], name='dating_feed_user_id_ee905a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='commentinteraction',
            unique_together={('user', 'comment')},
        ),
    ]
